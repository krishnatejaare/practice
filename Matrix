Suitable for: Mid-Senior Level.
Time: 15-45 minutes
Format: Phone-Screen or In-Person
Skills: Knowledge of algorithms, asking clarifying questions and coding to spec.
The Problem

Given an MxN matrix with sorted rows and sorted columns, and a target number, write a function to return true if the number is in the matrix, or false otherwise.

For the Interviewer

Encourage the candidate to think aloud about algorithms and data structures. Tell the candidate:

The fact that numbers are sorted usually means that binary search can be used, but how?

There is one potential caveat: it is not guaranteed that, all numbers in the latter rows are bigger than those above (and the same thing for columns).

To simplify, we can first assume it is a square matrix, but it is not necessary.

Hints

Don't worry about any optimal solutions yet. Try to have a working one before optimizing.

Binary search can be used, but maybe not the best solution :-)

Followup Questions

What if the matrix has a very large number of rows and a small number of columns?

If time permits, write a function to return the number of occurrences of that number in the matrix.

Solution

Sample solutions are follow.

Solution #1

    boolean searchMatrix(int[][] matrix, int target) {

        int m = matrix.length;
        if (m == 0) return false;

        int n = matrix[0].length;
        if (n == 0) return false;

        for (int i = 0; i < m; i++) {
            if (matrix[i][0] > target) return false;
            if (matrix[i][n - 1] < target) continue;
            if (matrix[i][0] == target || matrix[i][n - 1] == target)
                return true;
            int start = 0;
            int end = n - 1;
            int middle = (start + end) / 2;
            while (1) {
                if (start == end || start == middle) {
                    if (matrix[i][start] == target || matrix[i][end] == target)
                        return true;
                    else break;
                }
                if (matrix[i][middle] == target) return true;
                if (matrix[i][middle] > target) {
                    end = middle - 1;
                }
                else {
                    start = middle + 1;
                }
                middle = (start + end) / 2;
            }
        }
        return false;
    }
Solution #2:

    public boolean searchMatrix(int[][] matrix, int target) {
        // start our "pointer" in the bottom-left
        int row = matrix.length-1;
        int col = 0;

        while (row >= 0 && col < matrix[0].length) {
            if (matrix[row][col] > target) {
                row--;
            } else if (matrix[row][col] < target) {
                col++;
            } else { // found it
                return true;
            }
        }

        return false;
    }
Solution #3

    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if (m < 1) return false;
        int n = matrix[0].length;

        return searchMatrix(matrix, new int[]{0, 0}, new int[]{m - 1, n - 1}, target);
    }

    private boolean searchMatrix(int[][] matrix, int[] upperLeft, int[] lowerRight, int target) {

        if (upperLeft[0] > lowerRight[0] || upperLeft[1] > lowerRight[1]
                || lowerRight[0] >= matrix.length || lowerRight[1] >= matrix[0].length)
            return false;
        if (lowerRight[0] - upperLeft[0] == 0 && lowerRight[1] - upperLeft[1] == 0)
            return matrix[upperLeft[0]][upperLeft[1]] == target;
        int rowMid = (upperLeft[0] + lowerRight[0]) >> 1;
        int colMid = (upperLeft[1] + lowerRight[1]) >> 1;
        int diff = matrix[rowMid][colMid] - target;
        if (diff > 0) {
            return searchMatrix(matrix, upperLeft, new int[]{rowMid, colMid}, target)
                    || searchMatrix(matrix, new int[]{upperLeft[0], colMid + 1}, new int[]{rowMid, lowerRight[1]},
                    target)
                    || searchMatrix(matrix, new int[]{rowMid + 1, upperLeft[1]}, new int[]{lowerRight[0], colMid},
                    target);
        } else if (diff < 0) {
            return searchMatrix(matrix, new int[]{upperLeft[0], colMid + 1}, new int[]{rowMid, lowerRight[1]}, target)
                    || searchMatrix(matrix, new int[]{rowMid + 1, upperLeft[1]}, new int[]{lowerRight[0], colMid},
                    target)
                    || searchMatrix(matrix, new int[]{rowMid + 1, colMid + 1}, lowerRight, target);
        } else return true;
    }
Evaluation

The minimum for a candidate is to come up with a solution that uses binary search on each row (or column) and then get the right complexity.
Candidate comes up with a good, clean, well structured code.
Candidate spent time clarifying and asking questions and discussing their approach before jumping into the implementation.
